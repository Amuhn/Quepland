@page "/SmithingMenu/"
@inject GameState  GameState
@inject MessageManager  MessageManager
@using System.Threading;
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper

<h1>Inside the Smithy</h1>
<p>An entire working forge lays before you. Pick any metal to begin.</p>

<div class="progress">
    <div class="progress-bar bg-success" style="@GetWidthString();transition:none;" role="progressbar" aria-valuenow=@GetValueString() aria-valuemin="0" aria-valuemax="100"></div>
</div>
<div class="main">
    @LoadAutoSmithing()
    @if (!isAutoSmithing)
    {
        @LoadActions()
    }

</div>



@functions{

    private bool waitingForAutoCollectMessage = true;
    private GameItem currentSmithingBar;
    private GameItem currentSmithingItem;
    private string lastSmithedBar;

    private int smithingStage = 0;
    private int progress = 0;
    private int autoSmithProgress = 0;

    private bool isAutoSmithing = false;
    private bool isUsingBar = false;
    private bool autoSmithItemSelected = false;
    private bool metalChanged = false;

    private bool barWithdrawn = false;

    private double speedMulti = 1;

    Random rand = new Random();
    private string areaURL;

    public RenderFragment LoadActions()
    {
        return builder =>
        {

            builder.OpenElement(0, "br");
            builder.CloseElement();

            if (GameState.isHunting == false && smithingStage == 0 && !isAutoSmithing)
            {
                foreach (GameItem i in Program.itemDatabase.GetSmithingBars())
                {

                    builder.OpenElement(0, "button");
                    builder.AddAttribute(0, "class", "btn btn-primary");
                    builder.AddAttribute(0, "style", "margin-bottom:10px");
                    builder.AddAttribute(0, "onclick", () => SetCurrentSmithingBar(i));
                    if (GameState.GetPlayer().HasRequiredLevel(i) == false)
                    {
                        builder.AddAttribute(0, "title", "You lack the levels to smelt this bar.(" + i.ActionRequired + ":" + i.RequiredLevel + ")");
                        builder.AddAttribute(0, "disabled", true);
                    }
                    else if (GameState.GetPlayer().HasIngredients(i.IngredientIDs) == false && GameState.GetPlayerInventory().HasItem(i) == false)
                    {
                        builder.AddAttribute(0, "title", "You lack the ingredients to smelt this bar.");
                        builder.AddAttribute(0, "disabled", true);
                    }
                    builder.AddContent(0, i.ItemName);
                    builder.CloseElement();

                    builder.OpenElement(0, "br");
                    builder.CloseElement();


                }

            }
            else if (GameState.isHunting == false && smithingStage == 1 && currentSmithingBar != null && !isAutoSmithing)
            {
                builder.OpenElement(0, "button");
                builder.AddAttribute(0, "class", "btn btn-primary");
                builder.AddAttribute(0, "style", "margin-bottom:10px");
                builder.AddAttribute(0, "onclick", () => UseOre());
                if (progress == 0 || progress >= 100)
                {

                }
                else
                {
                    builder.AddAttribute(0, "disabled", true);
                }
                if(GameState.GetPlayer().HasIngredients(currentSmithingBar.IngredientIDs) == false)
                {
                    builder.AddAttribute(0, "disabled", true);
                    builder.AddAttribute(0, "title", "You don't have the materials to do this.");
                }
                builder.AddContent(0, "Insert " + Extensions.GetIngredientsAsString(currentSmithingBar, Program.itemDatabase) + " into furnace");
                builder.CloseElement();
                builder.OpenElement(0, "br");
                builder.CloseElement();
                if (GameState.GetPlayerInventory().HasItem(currentSmithingBar))
                {
                    builder.OpenElement(0, "button");
                    builder.AddAttribute(0, "class", "btn btn-primary");
                    builder.AddAttribute(0, "style", "margin-bottom:10px");
                    builder.AddAttribute(0, "onclick", () => UseBar());
                    if (progress == 0 || progress >= 100)
                    {

                    }
                    else
                    {
                        builder.AddAttribute(0, "disabled", true);
                    }
                    builder.AddContent(0, "Insert " + currentSmithingBar.ItemName + " into furnace");
                    builder.CloseElement();

                    builder.OpenElement(0, "br");
                    builder.CloseElement();
                }


            }
            else if (GameState.isHunting == false && smithingStage == 2 && currentSmithingBar != null && !isAutoSmithing)
            {
                builder.OpenElement(0, "button");
                builder.AddAttribute(0, "class", "btn btn-primary");
                builder.AddAttribute(0, "style", "margin-bottom:10px");
                builder.AddAttribute(0, "onclick", () => IncrementSmithingStage());
                if (progress == 0 || progress >= 100)
                {

                }
                else
                {
                    builder.AddAttribute(0, "disabled", true);
                }
                builder.AddContent(0, "Remove " + currentSmithingBar.ItemName + " from furnace");

                builder.CloseElement();

                builder.OpenElement(0, "br");
                builder.CloseElement();

            }
            else if (GameState.isHunting == false && smithingStage == 3 && currentSmithingBar != null && !isAutoSmithing)
            {
                builder.OpenElement(0, "button");
                builder.AddAttribute(0, "class", "btn btn-primary");
                builder.AddAttribute(0, "style", "margin-bottom:10px");

                builder.AddAttribute(0, "onclick", () => ResetSmithingStage());
                if (progress == 0 || progress >= 100)
                {

                }
                else
                {
                    builder.AddAttribute(0, "disabled", true);
                }
                builder.AddContent(0, "Smith another bar");
                builder.CloseElement();
                builder.OpenElement(0, "p");
                builder.AddContent(0, "Hammer " + currentSmithingBar.ItemName + " into a...");
                builder.CloseElement();
                builder.OpenElement(0, "br");
                builder.CloseElement();
                foreach (GameItem i in Program.itemDatabase.GetSmithingItems())
                {
                    if (i.IngredientIDs[0] == currentSmithingBar.Id)
                    {
                        builder.OpenElement(0, "button");
                        builder.AddAttribute(0, "class", "btn btn-primary");
                        builder.AddAttribute(0, "style", "margin-bottom:10px");

                        builder.AddAttribute(0, "onclick", () => SetCurrentSmithingItem(i));
                        if (progress == 0 || progress >= 100)
                        {

                        }
                        else
                        {
                            builder.AddAttribute(0, "disabled", true);
                        }
                        builder.AddContent(0, i.ItemName);
                        builder.CloseElement();

                        builder.OpenElement(0, "br");
                        builder.CloseElement();
                    }
                }


            }
            else if (GameState.isHunting == false && smithingStage == 4 && currentSmithingItem != null && !isAutoSmithing)
            {
                builder.OpenElement(0, "button");
                builder.AddAttribute(0, "class", "btn btn-primary");
                builder.AddAttribute(0, "style", "margin-bottom:10px");

                builder.AddAttribute(0, "onclick", () => IncrementSmithingStage());
                if (progress == 0 || progress >= 100)
                {

                }
                else
                {
                    builder.AddAttribute(0, "disabled", true);
                }
                builder.AddContent(0, "Cool " + currentSmithingItem.ItemName + " in water");
                builder.CloseElement();

                builder.OpenElement(0, "br");
                builder.CloseElement();

            }
            else if (GameState.isHunting == false && smithingStage == 5 && currentSmithingItem != null && !isAutoSmithing)
            {
                builder.OpenElement(0, "button");
                builder.AddAttribute(0, "class", "btn btn-primary");
                builder.AddAttribute(0, "style", "margin-bottom:10px");

                builder.AddAttribute(0, "onclick", () => CollectItem());
                if (progress == 0 || progress >= 100)
                {

                }
                else
                {
                    builder.AddAttribute(0, "disabled", true);
                }
                builder.AddContent(0, "Withdraw " + currentSmithingItem.ItemName);
                builder.CloseElement();

                builder.OpenElement(0, "br");
                builder.CloseElement();

            }
        };
    }
    public RenderFragment LoadAutoSmithing()
    {
        return builder =>
        {
            if(autoSmithProgress == 0 && isAutoSmithing == false)
            {
                builder.OpenElement(0, "button");
                builder.AddAttribute(1, "class", "btn btn-primary");
                if(GameState.GetPlayer().activeFollower != null && GameState.GetPlayer().activeFollower.AutoCollectSkill == "Smithing")
                {
                    builder.AddAttribute(2, "onclick", () => BeginAutoSmithing());
                }
                else
                {
                    builder.AddAttribute(3, "title", "You need someone to help you do this.");
                    builder.AddAttribute(4, "disabled", true);
                }
                if (GameState.GetPlayerInventory().GetAnyOre() == null && GameState.GetPlayerInventory().GetAnyBar() == null)
                {
                    builder.AddAttribute(5, "title", "You don't have anything to smith.");
                    builder.AddAttribute(6, "disabled", true);
                }
                builder.AddContent(7, "Auto Smith");
                builder.CloseElement();
                builder.OpenElement(8, "br");
                builder.CloseElement();
            }
            else if(autoSmithProgress == 2 && autoSmithItemSelected == false)
            {
                builder.OpenElement(0, "p");
                builder.AddContent(1, "Select an item to make while smithing.");
                builder.CloseElement();
                foreach(GameItem item in Program.itemDatabase.GetSmithingItems().Where(x => x.IngredientIDs[0] == currentSmithingBar.Id))
                {
                    builder.OpenElement(2, "p");
                    builder.OpenElement(3, "button");
                    builder.AddAttribute(4, "class", "btn btn-primary");
                    builder.AddAttribute(5, "onclick", () => SetAutoSmithItem(item));
                    builder.AddContent(6, item.ItemName);
                    builder.CloseElement();
                    builder.CloseElement();
                }
            }
            if (isAutoSmithing)
            {
                builder.OpenElement(7, "p");
                builder.OpenElement(8, "button");
                builder.AddAttribute(9, "class", "btn btn-primary");
                builder.AddAttribute(10, "onclick", () => StopAutoSmithing());
                builder.AddContent(11, "Stop Smithing");
                builder.CloseElement();
                builder.CloseElement();
            }
        };
    }
    private void SetAutoSmithItem(GameItem item)
    {
        autoSmithItemSelected = true;
        SetCurrentSmithingItem(item);
    }
    private bool CheckForMaterials()
    {
        bool barFound = false;
        foreach(GameItem bar in Program.itemDatabase.GetSmithingBars())
        {
            if (GameState.GetPlayerInventory().HasBarIngredients(bar))
            {
                if(lastSmithedBar != null && lastSmithedBar != bar.ItemName)
                {
                    metalChanged = true;
                }
                SetCurrentSmithingBar(bar);
                isUsingBar = false ;
                //UseOre();
                barFound = true;
                break;
            }
            else if(GameState.GetPlayerInventory().HasItem(bar))
            {
                if(lastSmithedBar != null && lastSmithedBar != bar.ItemName)
                {
                    metalChanged = true;
                }
                SetCurrentSmithingBar(bar);
                isUsingBar = true;
                //UseBar();
                barFound = true;
                break;
            }
        }

        return barFound;
    }
    public void BeginAutoSmithing()
    {
        StopSmithing();
        GameState.isSmithing = true;
        autoSmithProgress = 0;
        isAutoSmithing = true;

        bool barFound = CheckForMaterials();
        if(!barFound)
        {
            currentSmithingBar = null;

            if (!GetOresFromBank())
            {
                MessageManager.AddMessage("You have run out of materials.");
                StopAutoSmithing();
                return;
            }
            else
            {
                MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " heads to the bank and returns with more materials to smith.");
                BeginAutoSmithing();
                return;
            }
        }

        MessageManager.AddMessage("You begin to smith with " + GameState.GetPlayer().activeFollower.Name);
        GameState.autoSmithingTimer = new Timer(new TimerCallback(_ =>
        {
            if (isAutoSmithing)
            {
                if(autoSmithProgress == 6)
                {
                    autoSmithProgress = 0;
                    GameState.autoSmithingTimer.Dispose();
                    BeginAutoSmithing();

                }
                else if (autoSmithProgress == 5)
                {
                    MessageManager.AddMessage("You take the " + currentSmithingItem + " " + GameState.GetPlayer().activeFollower.Name + " hands you.");
                    AutoCollectItem();
                    autoSmithProgress++;

                }
                else if (autoSmithProgress == 4)
                {
                    MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " puts the " + currentSmithingItem + " in water to cool.");
                    autoSmithProgress++;
                }
                else if (autoSmithProgress == 3)
                {
                    MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " hammers the " + currentSmithingBar + " into a " + currentSmithingItem.ItemName);
                    GameState.GetPlayerInventory().RemoveOneOfItem(currentSmithingBar);
                    autoSmithProgress++;
                }
                else if (autoSmithProgress == 2)
                {
                    if (!barWithdrawn)
                    {
                        GameState.GetPlayerInventory().AddItem(currentSmithingBar);
                        barWithdrawn = true;
                        MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " withdraws a " + currentSmithingBar + ".");
                    }
                    if (autoSmithItemSelected)
                    {
                        autoSmithProgress++;
                    }
                }
                else if (autoSmithProgress == 1)
                {
                    if (isUsingBar)
                    {
                        MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " puts the " + currentSmithingBar + " in the furnace.");
                        UseBar();
                        autoSmithProgress++;
                    }
                    else
                    {
                        MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " puts the " + Extensions.GetIngredientsAsString(currentSmithingBar, Program.itemDatabase) + " in the furnace.");
                        UseOre();
                        autoSmithProgress++;
                    }
                    if (metalChanged)
                    {
                        metalChanged = false;
                        autoSmithItemSelected = false;
                    }
                    barWithdrawn = false;
                    
                }
                else if (autoSmithProgress == 0)
                {
                    autoSmithProgress++;
                }
            }
            GameState.UpdateState();
            StateHasChanged();
        }), null, 1500,1500);
        GameState.UpdateState();
        StateHasChanged();
    }
    private void SetCurrentSmithingBar(GameItem i)
    {
        if(i == null)
        {
            return;
        }
        currentSmithingBar = i;
        smithingStage++;
        StateHasChanged();
        //IncrementSmithingStage();
    }
    private void SetCurrentSmithingItem(GameItem i)
    {
        if(i == null)
        {
            return;
        }

        currentSmithingItem = i;
        GameState.GetPlayerInventory().RemoveItemsByID(i.IngredientIDs);
        IncrementSmithingStage();
    }
    private void UseOre()
    {
        GameState.GetPlayerInventory().RemoveItemsByID(currentSmithingBar.IngredientIDs);
    }
    private void UseBar()
    {
        GameState.GetPlayerInventory().RemoveItemByID(currentSmithingBar.Id);
    }
    private void IncrementSmithingStage()
    {
        if (isAutoSmithing)
        {
            return;
        }
        if (GameState.smithingTimer != null)
        {
            GameState.smithingTimer.Dispose();
            GameState.smithingTimer = null;
        }

        progress = 0;
        SendMessage();
        GameState.isSmithing = true;
        GameState.smithingTimer = new Timer(new TimerCallback(_ =>
        {
            if (progress >= 100)
            {
                if (smithingStage == 2)
                {
                    GameState.GetPlayerInventory().AddItem(currentSmithingBar);
                    if (!isUsingBar)
                    {
                        GameState.GetPlayer().GainExperience(currentSmithingBar.ExperienceGained);
                    }

                }
                GameState.smithingTimer.Dispose();
                GameState.smithingTimer = null;
                smithingStage++;
                GameState.isSmithing = false;
                StateHasChanged();
                GameState.UpdateState();
            }
            progress += 2;
            StateHasChanged();
            GameState.UpdateState();
        }), null, 20, 20);

        StateHasChanged();
        GameState.UpdateState();
    }
    private void CollectItem()
    {
        smithingStage = 0;
        int numToMake = Math.Max(currentSmithingItem.MadeOnCreation, 1);
        GameState.GetPlayerInventory().AddMultipleOfItem(currentSmithingItem, numToMake);
        GameState.GetPlayer().GainExperience(currentSmithingBar.ExperienceGained);
        lastSmithedBar = currentSmithingBar.ItemName;
        currentSmithingItem = null;
        currentSmithingBar = null;
        GameState.isSmithing = false;
        StateHasChanged();
        GameState.UpdateState();

    }
    private void AutoCollectItem()
    {
        smithingStage = 0;
        int numToMake = Math.Max(currentSmithingItem.MadeOnCreation, 1);
        GameState.GetPlayerInventory().AddMultipleOfItem(currentSmithingItem, numToMake);
        GameState.GetPlayer().GainExperience(currentSmithingBar.ExperienceGained);
        lastSmithedBar = currentSmithingBar.ItemName;
        currentSmithingBar = null;
        StateHasChanged();
        GameState.UpdateState();
    }
    private void SendMessage()
    {
        string message = "";
        if (smithingStage == 0)
        {
            message = "You prepare to smelt the ore.";
        }
        else if (smithingStage == 1)
        {
            message = "You place the ore in the furnace.";
        }
        else if (smithingStage == 2)
        {
            message = "You remove the bar from the furnace.";
        }
        else if (smithingStage == 3)
        {
            message = "You hammer the bar into a " + currentSmithingItem.ItemName + ".";
        }
        else if (smithingStage == 4)
        {
            message = "You place the " + currentSmithingItem.ItemName + " in water to cool.";
        }
        else if (smithingStage == 5)
        {
            message = "You withdraw the " + currentSmithingItem.ItemName + " from the water.";
        }
        MessageManager.AddMessage(message);
    }
    private void ResetSmithingStage()
    {
        smithingStage = 0;
    }
    private void SkipToHammerStage()
    {
        smithingStage = 2;
    }
    private string GetWidthString()
    {
        return "width: " + progress + "%";
    }
    private string GetValueString()
    {
        return "" + progress;
    }
    private string DepositAll()
    {
        GameState.GetPlayerBank().GetInventory().AddItems(GameState.GetPlayerInventory().GetUnequippedItems());
        GameState.GetPlayerInventory().EmptyInventoryOfUnequippedItems();
        GameState.UpdateState();
        StateHasChanged();
        return "";
    }
    private int WithdrawItemsFromBank(GameItem item)
    {
        int amountToWithdraw = Math.Min(GameState.GetPlayerBank().GetInventory().GetAmountOfItem(item), GameState.GetPlayerInventory().GetAvailableSpaces());
        GameState.GetPlayerInventory().AddMultipleOfItem(item, amountToWithdraw);
        GameState.GetPlayerBank().GetInventory().RemoveItems(item, amountToWithdraw);
        GameState.UpdateState();
        this.StateHasChanged();
        return amountToWithdraw;
    }
    private int WithdrawItemsFromBank(GameItem item, int maxAmount)
    {
        int amountToWithdraw = Math.Min(Math.Min(GameState.GetPlayerBank().GetInventory().GetAmountOfItem(item), GameState.GetPlayerInventory().GetAvailableSpaces()), maxAmount);
        GameState.GetPlayerInventory().AddMultipleOfItem(item, amountToWithdraw);
        GameState.GetPlayerBank().GetInventory().RemoveItems(item, amountToWithdraw);
        GameState.UpdateState();
        this.StateHasChanged();
        return amountToWithdraw;
    }
    private bool GetOresFromBank()
    {
        foreach(GameItem bar in Program.itemDatabase.GetSmithingBars())
        {
            if (GameState.GetPlayerBank().GetInventory().HasBarIngredients(bar) && GameState.GetPlayer().HasRequiredLevel(bar))
            {
                if(lastSmithedBar != null && lastSmithedBar != bar.ItemName)
                {
                    metalChanged = true;
                }
                int maxIngredients = GameState.GetPlayerBank().GetInventory().GetMaxBarIngredients(bar) / bar.IngredientIDs.Length;
                foreach(int id in bar.IngredientIDs)
                {
                    maxIngredients = WithdrawItemsFromBank(Program.itemDatabase.GetItemByID(id), maxIngredients);
                }
                MessageManager.AddMessage("" + GameState.GetPlayer().activeFollower.Name + " heads off to the bank and returns with " + maxIngredients + " ores.");
                isUsingBar = false;
                return true;
            }
            else if(GameState.GetPlayerBank().GetInventory().HasItem(bar) && GameState.GetPlayer().HasRequiredLevel(bar))
            {
                int maxIngredients = WithdrawItemsFromBank(bar);
                MessageManager.AddMessage("" + GameState.GetPlayer().activeFollower.Name + " heads off to the bank and returns with " + maxIngredients + " bars.");
                isUsingBar = true;
                return true;
            }
        }

        return false;
    }
    protected override void OnInit()
    {
        GameState.StateChanged += OnGameStateChanged;
        GameState.canSell = false;
        speedMulti = 1;
        this.StateHasChanged();
        GameState.UpdateState();
    }
    private void StopSmithing()
    {
        if(GameState.smithingTimer != null)
        {
            GameState.smithingTimer.Dispose();
            GameState.smithingTimer = null;
        }
        if(GameState.autoSmithingTimer != null)
        {
            GameState.autoSmithingTimer.Dispose();
            GameState.autoSmithingTimer = null;
        }
        GameState.isSmithing = false;
        GameState.UpdateState();
        StateHasChanged();
    }
    private void StopAutoSmithing()
    {
        if(GameState.smithingTimer != null)
        {
            GameState.smithingTimer.Dispose();
            GameState.smithingTimer = null;
        }
        if(GameState.autoSmithingTimer != null)
        {
            GameState.autoSmithingTimer.Dispose();
            GameState.autoSmithingTimer = null;
        }
        GameState.isSmithing = false;
        isAutoSmithing = false;
        autoSmithProgress = 0;
        currentSmithingBar = null;
        currentSmithingItem = null;
        GameState.UpdateState();
        StateHasChanged();
    }
    public void Dispose()
    {
        StopAutoSmithing();
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}