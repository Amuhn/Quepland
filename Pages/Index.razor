@page "/"
@inject HttpClient Http
@inject GameState GameState
@inject MessageManager MessageManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@implements IDisposable


<h1>Hello, Welcome to Quepland!</h1>

@if (debugMode)
{
    @testString
    <p><button class="btn btn-primary" onclick="@(() => DebugAll99s())">Max Account</button></p>
    <p><button class="btn btn-primary" onclick="@(() => DebugUnlockAllFollowers())">Unlock Followers</button></p>
    <p><button class="btn btn-primary" onclick="@(() => DebugGetMoney())">Gain Money</button></p>
    <p><button class="btn btn-primary" onclick="@(() => DebugOneOfEveryItem())">Get All Items</button></p>
    <p><button class="btn btn-primary" onclick="@(() => DebugGainStrengthLevel())">Gain Strength Level</button></p>
    <p><button class="btn btn-primary" onclick="@(() => EncryptionTest())">Encrypt String</button></p>
    <p><button class="btn btn-primary" onclick="@(() => DecryptionTest())">Decrypt String</button></p>
    <p><button class="btn btn-primary" onclick="@(() => SaveDataEncrypted())">Save Encrypted</button></p>
    <p><button class="btn btn-primary" onclick="@(() => LoadDataEncrypted())">Load Encrypted</button></p>
    <p><button class="btn btn-primary" onclick="@(() => GetSaveDataString())">Get Save Data String</button></p>
    <p><button class="btn btn-primary" onclick="@(() => LoadDataFromString(testString))">Load Save Data String</button></p>
}

@if (GameState.saveDataLoaded == false && saveGameExists && gameHasBeenSaved == false && loadBegun == false)
{
    <p><button class="btn btn-primary" onclick="@(() => LoadData())">Load Game</button></p>
}
else
{
    <p>Click the bank on your left to begin your journey. You'll find an axe to start off.</p>
    <p><button class="btn btn-primary" disabled onclick="@(() => LoadData())">Load Game</button></p>
}
@if (saveGameExists == false || (GameState.saveDataLoaded == true))
{
    <p><button class="btn btn-primary" onclick="@(() => SaveData())">Save Game</button></p>
}
else
{
    <p><button class="btn btn-primary" disabled onclick="@(() => SaveData())">Save Game</button></p>
}

<br />
<br />
@if (userWantsGameReset)
{
    <p><button class="btn btn-primary" onclick="@(() => ResetGame())">Are you sure?</button></p>
}
else
{
    <p><button class="btn btn-primary" onclick="@(() => AskForReset())">Reset Game</button></p>
}

@functions{
    private bool saveGameExists = false;
    private bool loadBegun = false;
    private bool userWantsGameReset = false;
    private bool gameHasBeenSaved = false;
    private bool gameIsRendered = false;
    private bool debugMode = false;
    public string pudding = "Not set.";
    public string encrypt = "This is a whole string, with many things to test! 1234, 50, 100";
    public string testString = "";
    private SimpleAES Encryptor = new SimpleAES();

    public void EncryptionTest()
    {
        encrypt = Encryptor.EncryptToString(encrypt);
        StateHasChanged();
    }
    public void DecryptionTest()
    {
        encrypt = Encryptor.DecryptString(encrypt);
        StateHasChanged();
    }
    public void DebugUnlockAllFollowers()
    {
        foreach (Follower f in Program.followerManager.GetFollowers())
        {
            f.IsUnlocked = true;
        }
    }
    public void DebugGainStrengthLevel()
    {
        GameState.GetPlayer().GainExperience("Strength", Extensions.GetExperienceRequired(GameState.GetPlayer().GetLevel("Strength")));
        GameState.UpdateState();
        StateHasChanged();
    }
    public void DebugOneOfEveryItem()
    {

        GameState.GetPlayerBank().GetInventory().AddOneOfMultipleItemsUnlimited(Program.itemDatabase.GetAllItems());

    }
    public void DebugAll99s()
    {
        foreach (Skill s in GameState.GetPlayer().GetSkills())
        {
            GameState.GetPlayer().GainExperience(s.SkillName, 15000000);
        }
    }
    public void DebugGetMoney()
    {
        GameState.GetPlayerBank().GetInventory().AddMultipleOfItemUnlimited(Program.itemDatabase.GetGold(), 100000);
    }
    private void AskForReset()
    {
        userWantsGameReset = true;
    }
    private void ResetGame()
    {
        MessageManager.AddMessage("Save Game Reset. Please reload the page to avoid errors.");
        localStorage.Clear();
        StateHasChanged();
    }
    private string SaveDataEncrypted()
    {
        localStorage.SetItem("eSave", GetSaveDataString());
        return "";
    }
    private string LoadDataEncrypted()
    {
        LoadDataFromString(localStorage.GetItem<string>("eSave"));
        GameState.UpdateState();
        this.StateHasChanged();
        return "";
    }
    private string SaveData()
    {
        localStorage.SetItem("Bank", GameState.GetPlayerBank().GetInventory().ToString());
        localStorage.SetItem("Skills", GameState.GetPlayer().GetSkillString());
        localStorage.SetItem("Inventory", GameState.GetPlayerInventory().ToString());
        localStorage.SetItem("Areas", Program.areaManager.SaveAreas());
        localStorage.SetItem("Followers", Program.followerManager.ToString());
        localStorage.SetItem("HP", GameState.GetPlayer().CurrentHP);
        if (GameState.GetPlayer().activeFollower != null)
        {
            localStorage.SetItem("ActiveFollower", GameState.GetPlayer().activeFollower.id);
        }

        localStorage.SetItem("AlchemyRecipes", GameState.GetPlayer().GetRecipes());
        List<int> ids = new List<int>();
        foreach (KeyValuePair<GameItem, int> pair in GameState.GetPlayerInventory().GetEquippedItems())
        {
            ids.Add(pair.Key.Id);
        }
        localStorage.SetItem("EquippedItems", ids);
        localStorage.SetItem("SaveGameExists", true);
        SaveDataEncrypted();
        MessageManager.AddMessage("You game has been saved.");
        gameHasBeenSaved = true;
        GameState.saveDataLoaded = true;
        return "";
    }

    private void TestLocalStorage()
    {

        string success = "Local storage could not be accessed. Saving is not possible without working local storage. Please enable cookies to save your game.";
        try
        {
            localStorage.SetItem("testString", "success");
            success = localStorage.GetItem<string>("testString");
        }
        catch
        {
            MessageManager.AddMessage(success);
        }

    }
    public string GetSaveDataString()
    {
        string data = "";
        //Bank 0
        data += "" + GameState.GetPlayerBank().GetInventory().ToString();
        //Skills 1
        data += "#" + GameState.GetPlayer().GetSkillString();
        //Inventory 2
        data += "#" + GameState.GetPlayerInventory().ToString();
        //Areas 3
        data += "#" + Program.areaManager.SaveAreas();
        //Followers 4
        data += "#" + Program.followerManager.ToString();
        //HP 5
        data += "#" + GameState.GetPlayer().CurrentHP.ToString();
        //ActiveFollower 6
        if (GameState.GetPlayer().activeFollower != null)
        {
            data += "#" + GameState.GetPlayer().activeFollower.id;
        }
        else
        {
            data += "#";
        }
        //Recipes 7
        data += "#";
        foreach (string s in GameState.GetPlayer().GetRecipes())
        {
            data += s + "/";
        }
        //EquippedItems 8
        data += "#";
        foreach (KeyValuePair<GameItem, int> pair in GameState.GetPlayerInventory().GetEquippedItems())
        {
            data += pair.Key.Id + "/";
        }
        testString = Encryptor.EncryptToString(data);
        return testString;
    }
    private void LoadDataFromString(string data)
    {
        string decryptedData = Encryptor.DecryptString(data);
        
        
        string[] lines = decryptedData.Split('#');
        testString = lines[0];
        
        Dictionary<GameItem, int> bankItems = Extensions.GetItemDicFromString(lines[0], Program.itemDatabase);      
        List<Skill> skills = Extensions.GetSkillsFromString(lines[1]);
        Dictionary<GameItem, int> invItems = Extensions.GetItemDicFromString(lines[2], Program.itemDatabase);

        GameState.GetPlayerBank().GetInventory().LoadItems(bankItems);
        GameState.GetPlayer().SetSkills(skills);      
        GameState.GetPlayerInventory().LoadItems(invItems);

        Program.areaManager.LoadSaveData(lines[3]);
        Program.followerManager.LoadSaveData(lines[4]);

        if (int.TryParse(lines[5], out int hp))
        {
            GameState.GetPlayer().CurrentHP = hp;
        }
        else
        {
            GameState.GetPlayer().CurrentHP = GameState.GetPlayer().GetLevel("HP");
        }

        if (int.TryParse(lines[6], out int activeFollower))
        {
            GameState.GetPlayer().activeFollower = Program.followerManager.GetFollowerByID(activeFollower);
        }

        List<string> recipes = lines[7].Split('/').ToList();
        GameState.GetPlayer().LoadRecipes(recipes);


        List<int> equippedItems = new List<int>();
        foreach (string s in lines[8].Split('/') ?? Enumerable.Empty<string>())
        {
            if (int.TryParse(s, out int id))
            {
                equippedItems.Add(id);
            }
        }
        if (equippedItems != null && equippedItems.Count > 0)
        {
            GameState.GetPlayer().EquipItems(equippedItems);
        }
        MessageManager.AddMessage("Save game loaded.");

        GameState.saveDataLoaded = true;
        GameState.UpdateState();
        this.StateHasChanged();
    }
    private void LoadData()
    {
        loadBegun = true;
        Dictionary<GameItem, int> bankItems = Extensions.GetItemDicFromString(localStorage.GetItem<String>("Bank"), Program.itemDatabase);
        Dictionary<GameItem, int> invItems = Extensions.GetItemDicFromString(localStorage.GetItem<String>("Inventory"), Program.itemDatabase);
        List<Skill> skills = Extensions.GetSkillsFromString(localStorage.GetItem<string>("Skills"));
        GameState.GetPlayer().SetSkills(skills);
        List<int> equippedItems = localStorage.GetItem<List<int>>("EquippedItems");
        GameState.GetPlayerBank().GetInventory().LoadItems(bankItems);
        GameState.GetPlayerInventory().LoadItems(invItems);

        GameState.GetPlayer().CurrentHP = localStorage.GetItem<int>("HP");



        Program.followerManager.LoadSaveData(localStorage.GetItem<String>("Followers"));

        if (Program.followerManager.GetFollowerByID(localStorage.GetItem<int>("ActiveFollower")).IsUnlocked)
        {
            GameState.GetPlayer().activeFollower = Program.followerManager.GetFollowerByID(localStorage.GetItem<int>("ActiveFollower"));
        }

        GameState.GetPlayer().LoadRecipes(localStorage.GetItem<List<string>>("AlchemyRecipes"));
        Program.areaManager.LoadSaveData(localStorage.GetItem<String>("Areas"));
        if (equippedItems != null && equippedItems.Count > 0)
        {
            GameState.GetPlayer().EquipItems(equippedItems);
        }

        MessageManager.AddMessage("Save game loaded.");

        GameState.saveDataLoaded = true;
        GameState.UpdateState();
        this.StateHasChanged();
    }
    protected override void OnInit()
    {
        GameState.StateChanged += OnGameStateChanged;
        saveGameExists = localStorage.GetItem<bool>("SaveGameExists");
        if (GameState.gameDataLoaded == false)
        {
            Program.gatherManager.SetGameState(GameState);
            Program.huntingManager.SetGameState(GameState);

            GameState.LoadPlayerData(Http);

            Program.itemDatabase.LoadItems(Http);
            Program.areaManager.LoadAreas(Http);
            Program.buildingManager.LoadBuildings(Http);
            Program.followerManager.LoadFollowers(Http);
            Program.npcManager.LoadNPCs(Http);
            Program.battleManager.LoadMonsters(Http);
            GameState.GetPlayer().SetMessageManager(MessageManager);
            GameState.GetPlayer().CurrentHP = 50;
            GameState.gameDataLoaded = true;
        }

        

        GameState.UpdateState();
        this.StateHasChanged();
    }
    protected override void OnAfterRender()
    {

    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}