@page "/FightingMenu/{thisArea}"
@inject GameState  GameState
@inject MessageManager  MessageManager
@using System.Threading;
@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper

@if (area != null)
{
    <p>You are seeking enemies to fight in @area.Name</p>
    @winString
    <br />
    @LoadBattleMenu()
    @if (battleFound)
    {
        @LoadBattle()
    }

}

@functions{

    [Parameter]
    private string thisArea { get; set; }
    private Area area;
    Random rand = new Random();
    private bool battleFound;
    private bool battleStarted;
    private Monster opponent;
    private Timer monsterAttackTimer;
    private Timer autoFightTimer;
    private bool autoFight;
    private List<Monster> possibleMonsters = new List<Monster>();
    private string areaURL;
    private string winString = "";

    private RenderFragment LoadBattleMenu()
    {
        return builder =>
        {
            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", () => FindBattle());
            if (battleStarted || autoFight)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You can't do this while battling!");
            }
            builder.AddContent(0, "Find Battle");
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", () => StartAutoFighting());
            //If there is a battle, the player has no follower, or the player's follower is not a fighter, or is already auto fighting.
            if (battleStarted ||
            (GameState.GetPlayer().activeFollower == null) ||
            (GameState.GetPlayer().activeFollower != null && GameState.GetPlayer().activeFollower.AutoCollectSkill != "Fighting") ||
            autoFight)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You'll need a follower who can help you find enemies to do this.");
            }
            builder.AddContent(0, "Auto Battle");
            builder.CloseElement();
            if (autoFight)
            {
                builder.OpenElement(0, "br");
                builder.CloseElement();

                builder.OpenElement(0, "button");
                builder.AddAttribute(0, "class", "btn btn-primary");
                builder.AddAttribute(0, "style", "margin-bottom:10px");
                builder.AddAttribute(0, "onclick", () => EndTimers());
                builder.AddContent(0, "Stop Battling");
                builder.CloseElement();
            }
        };
    }
    private RenderFragment LoadBattle()
    {
        return builder =>
        {
            builder.OpenElement(0, "p");
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:left");
            builder.AddContent(1, opponent.Name);
            builder.CloseElement();
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:right");
            builder.AddContent(1, "You");
            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.OpenElement(0, "p");
            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:left");
            builder.AddContent(1, opponent.CurrentHP + "/" + opponent.HP);
            builder.CloseElement();

            builder.OpenElement(1, "span");
            builder.AddAttribute(1, "style", "float:right");
            builder.AddContent(1, GameState.GetPlayer().CurrentHP + "/" + GameState.GetPlayer().GetSkill("HP").GetSkillLevel());
            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.AddContent(0, LoadHPBars());

            builder.OpenElement(0, "br");
            builder.CloseElement();

            builder.OpenElement(0, "button");
            builder.AddAttribute(0, "class", "btn btn-primary");
            builder.AddAttribute(0, "style", "margin-bottom:10px");
            builder.AddAttribute(0, "onclick", () => StartBattle());
            if (battleStarted == true)
            {
                builder.AddAttribute(0, "disabled", true);
                builder.AddAttribute(0, "title", "You can't do this while battling.");
            }
            builder.AddContent(0, "Start Battle");
            builder.CloseElement();

        };
    }
    private RenderFragment LoadHPBars()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "progress");

            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "progress-bar bg-success");
            builder.AddAttribute(4, "style", "width:" + ((float)opponent.CurrentHP / opponent.HP) * 100 + "%");
            builder.AddAttribute(5, "role", "progressbar");
            builder.AddAttribute(6, "aria-valuenow", "" + ((float)opponent.CurrentHP / opponent.HP) * 100);
            builder.AddAttribute(7, "aria-valuemin", "0");
            builder.AddAttribute(8, "aria-valuemax", "" + opponent.HP);
            builder.CloseElement();
            builder.CloseElement();
        };
    }
    public void StartAutoFighting()
    {
        autoFight = true;
        if(autoFightTimer != null)
        {
            autoFightTimer.Dispose();
            autoFightTimer = null;
        }
        MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " looks for an enemy for you to fight.");
        autoFightTimer = new Timer(new TimerCallback(_ =>
        {
            AutoBattle();
        }), null, 10000, 10000);
    }
    public void AutoBattle()
    {
        if(GameState.GetPlayer().activeFollower != null & GameState.GetPlayer().activeFollower.AutoCollectSkill == "Fighting")
        {
            if (battleFound == false)
            {
                MessageManager.AddMessage(GameState.GetPlayer().activeFollower.Name + " found a battle!");
                FindBattle();
                StartBattle();
            }
        }

    }
    public void FindBattle()
    {
        opponent = possibleMonsters[rand.Next(0, possibleMonsters.Count)];
        MessageManager.AddMessage("You encounter a " + opponent.Name);
        opponent.CurrentHP = opponent.HP;
        battleFound = true;
    }
    public void StartBattle()
    {
        battleStarted = true;
        if (GameState.attackTimer != null)
        {
            GameState.attackTimer.Dispose();
        }
        if(monsterAttackTimer != null)
        {
            monsterAttackTimer.Dispose();
        }
        GameState.attackTimer = new Timer(new TimerCallback(_ =>
        {
            Attack();
            GameState.UpdateState();
            this.StateHasChanged();
        }), null, GameState.GetPlayer().GetWeaponAttackSpeed(), GameState.GetPlayer().GetWeaponAttackSpeed());

        monsterAttackTimer = new Timer(new TimerCallback(_ =>
        {
            BeAttacked();
            GameState.UpdateState();
            this.StateHasChanged();
        }), null, 1000 * opponent.AttackSpeed, 1000 * opponent.AttackSpeed);

        GameState.UpdateState();
        this.StateHasChanged();
    }
    public void Attack()
    {
        if (battleFound)
        {
            int dmgDealt = Math.Min(GameState.GetPlayer().GetDamageDealt(opponent), opponent.CurrentHP);
            if (GameState.GetPlayer().GetWeapon() != null)
            {

                if(GameState.GetPlayer().GetWeapon().ActionRequired == "Archery")
                {
                    if(GameState.GetPlayerInventory().HasArrows())
                    {
                        if(rand.Next(2) == 0)
                        {
                            GameState.GetPlayerInventory().RemoveOneOfItem(GameState.GetPlayerInventory().GetStrongestArrows());
                        }                      
                        MessageManager.AddMessage("You shoot the " + opponent.Name + " for " + dmgDealt + " damage.");
                    }
                    else
                    {
                        MessageManager.AddMessage("You whack the " + opponent.Name + " with your bow for " + dmgDealt + " damage.");
                    }
                }
                else
                {
                    MessageManager.AddMessage("You dealt " + dmgDealt + " damage to the " + opponent.Name);
                }
                //GameState.GetPlayer().GainExperience(GameState.GetPlayer().GetWeapon().ActionRequired, dmgDealt * 2);
                if (opponent.Weakness.Contains(GameState.GetPlayer().GetWeapon().ActionRequired))
                {
                    GameState.GetPlayer().GainExperienceFromWeapon(GameState.GetPlayer().GetWeapon(), dmgDealt * 2);
                    MessageManager.AddMessage("It seemed to be very effective!");
                }
                else if (opponent.Strength.Contains(GameState.GetPlayer().GetWeapon().ActionRequired))
                {
                    GameState.GetPlayer().GainExperienceFromWeapon(GameState.GetPlayer().GetWeapon(), dmgDealt / 2);
                    MessageManager.AddMessage("It didn't seem to be very effective...");
                }
                else
                {
                    GameState.GetPlayer().GainExperienceFromWeapon(GameState.GetPlayer().GetWeapon(), dmgDealt);
                }
            }
            else
            {
                GameState.GetPlayer().GainExperience("Strength", dmgDealt * 3);
                MessageManager.AddMessage("You punch the " + opponent.Name + " for " + dmgDealt + " damage.");
            }

            opponent.CurrentHP -= dmgDealt;

            if(opponent.CurrentHP <= 0)
            {
                WinBattle();
            }
        }

    }
    public void BeAttacked()
    {
        if (battleFound)
        {
            int dmg = Math.Max(1, Extensions.GetGaussianRandomInt(opponent.Damage, opponent.Damage / 2d));
            GameState.GetPlayer().GainExperience("HP", Math.Min(GameState.GetPlayer().CurrentHP, dmg) * 8);
            GameState.GetPlayer().CurrentHP -= dmg;
            MessageManager.AddMessage("You took " + dmg + " damage from the " + opponent.Name + "'s attack.");
            if(GameState.GetPlayer().CurrentHP <= 0)
            {
                LoseBattle();
            }
        }

    }
    public void WinBattle()
    {
        MessageManager.AddMessage("You defeated the " + opponent.Name);
        if(opponent.AlwaysDrops != null)
        {
            GameState.GetPlayerInventory().AddMultiplesOfItems(Program.itemDatabase.GetItems(opponent.AlwaysDrops));
            MessageManager.AddMessage("You got " + Extensions.GetItemsAsString(Program.itemDatabase.GetItems(opponent.AlwaysDrops)));
        }
        GameItem drop = Program.itemDatabase.GetItemByID(Extensions.GetDrop(opponent));
        if(drop != null)
        {
            GameState.GetPlayerInventory().AddMultipleOfItem(drop, 1);
            MessageManager.AddMessage("You got a " + drop.ItemName);
        }

        battleFound = false;
        EndTimers();
        battleStarted = false;
        
        winString = "You won!";
        if (autoFight)
        {
            StartAutoFighting();
        }
    }
    public void LoseBattle()
    {
        MessageManager.AddMessage("You died to " + opponent.Name);
        GameState.GetPlayer().CurrentHP = GameState.GetPlayer().GetSkill("HP").GetSkillLevel();
        battleFound = false;
        battleStarted = false;
        autoFight = false;
        EndTimers();
        winString = "You lost!";
    }
    private void EndTimers()
    {
        if (GameState.attackTimer != null)
        {
            GameState.attackTimer.Dispose();
            GameState.attackTimer = null;
        }
        if (monsterAttackTimer != null)
        {
            monsterAttackTimer.Dispose();
            monsterAttackTimer = null;
        }
        if(autoFightTimer != null)
        {
            autoFightTimer.Dispose();
            autoFightTimer = null;
        }
        GameState.UpdateState();
        this.StateHasChanged();
    }
    protected override void OnParametersSet()
    {
        SetArea(thisArea);
    }
    private void SetArea(string areaString)
    {
        area = Program.areaManager.GetAreaByURL(areaString);
        GameState.currentArea = area;
        possibleMonsters = Program.battleManager.GetMonstersForArea(area);
    }
    protected override void OnInit()
    {
        GameState.StateChanged += OnGameStateChanged;
        GameState.canSell = false;
        GameState.GetPlayer().CurrentHP = GameState.GetPlayer().GetSkill("HP").GetSkillLevel();
        this.StateHasChanged();
        GameState.UpdateState();
    }
    public void Dispose()
    {
        autoFight = false;
        EndTimers();
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}