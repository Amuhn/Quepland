@inject GameState  GameState
@inject MessageManager  MessageManager
@using System.Threading
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@implements IDisposable

@LoadNavbarTop()

@LoadNavbar()

@functions {
    bool collapseNavMenu = true;

    private Area lastToggledArea;
    string autoSaveString = "Last autosave: Never";
    string test = "total";
    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private SimpleAES Encryptor = new SimpleAES();

    private bool loadGameComplete;

    private string GetURL(string areaURL)
    {
        return "GatherMenu/" + areaURL;
    }
    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private RenderFragment LoadNavbarTop()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "top-row pl-4 navbar navbar-dark");
            builder.OpenElement(2, "a");
            builder.AddAttribute(3, "class", "navbar-brand");
            if(GameState.CanLeave())
            {
                builder.AddAttribute(4, "href", "");
            }
            builder.AddAttribute(5, "style", "color:white");
            builder.AddContent(5, "Quepland Menu");
            builder.CloseElement();
            builder.OpenElement(6, "button");
            builder.AddAttribute(7, "class", "navbar-toggler");
            builder.AddAttribute(8, "onclick", () => ToggleNavMenu());
            builder.OpenElement(9, "span");
            builder.AddAttribute(10, "class", "navbar-toggler-icon");
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
        };
    }

    private RenderFragment LoadNavbar()
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", NavMenuCssClass);
            builder.AddAttribute(2, "onclick", () => ToggleNavMenu());
            builder.OpenElement(3, "ul");
            builder.AddAttribute(4, "class", "nav flex-column");

            if (GameState.CanLeave() && Program.areaManager != null)
            {
                //Make the bank link
                builder.OpenElement(5, "li");
                builder.AddAttribute(6, "class", "nav-item px-3");
                builder.OpenComponent<NavLink>(7);
                builder.AddAttribute(8, "class", "nav-link");
                builder.AddAttribute(9, "href", "/Bank");
                builder.AddAttribute(10, "ChildContent", (RenderFragment)((builder2) =>
                {
                    builder2.OpenElement(11, "span");
                    builder2.AddAttribute(12, "class", "oi oi-dollar");
                    builder2.AddAttribute(13, "aria-hidden", "true");
                    builder2.CloseElement();
                    builder2.AddContent(14, "Bank");
                }));
                builder.CloseComponent();
                builder.CloseElement();
                foreach (Area area in Program.areaManager.GetAreasWithChildren())
                {
                    if (area.IsUnlocked)
                    {
                        builder.AddContent(15, ParentButton(area));
                        foreach (string child in area.Children)
                        {
                            Area childArea = Program.areaManager.GetAreaByURL(child);
                            if(childArea.ID == 68)
                            {
                                builder.AddContent(16, NewNavButton(childArea, false));
                            }
                            else if (childArea.IsUnlocked && childArea.Hidden == false)
                            {
                                builder.AddContent(17, NavButton(childArea, false));
                            }
                        }
                    }
                }
            }
            builder.CloseElement();
            builder.CloseElement();
            if (loadGameComplete == false && GameState.saveDataLoaded == true)
            {
                HideAllChildren();
                loadGameComplete = true;
            }
        };
    }
    private RenderFragment NavButton(Area area, bool bold)
    {
        return builder =>
        {
            builder.OpenElement(0, "li");
            builder.AddAttribute(1, "class", "nav-item px-3");
            builder.OpenComponent<NavLink>(2);
            builder.AddAttribute(3, "class", "nav-link");

            if (area.ActionRequiredForAccess != null &&
                GameState.GetPlayer().HasItemToAccessArea(area.ActionRequiredForAccess) == false)
            {
                builder.AddAttribute(4, "href", "/GatherMenu/" + area.RedirectAreaURL);
                builder.AddAttribute(5, "onclick", () => MessageManager.AddMessage("You don't have the item to access this location.(" + area.ActionRequiredForAccess + ")", "red"));
                builder.AddAttribute(6, "title", "You do not have the item to access this location.(" + area.ActionRequiredForAccess + ")");
                builder.AddAttribute(7, "style", "background-color:#EC565650");
            }
            else
            {
                builder.AddAttribute(7, "href", "/GatherMenu/" + area.AreaURL);
            }

            builder.AddAttribute(12, "ChildContent", (RenderFragment)((builder2) =>
            {
                builder2.OpenElement(13, "span");
                builder2.AddAttribute(14, "class", area.Icon);
                builder2.AddAttribute(15, "aria-hidden", "true");
                builder2.CloseElement();
                builder2.OpenElement(16, "span");
                builder2.AddContent(18, area.Name);
                builder2.CloseElement();
                bool hasRoadblock = false;
                int numOfRoadblocks = 0;
                foreach (string a in area.UnlockableAreas ?? Enumerable.Empty<string>())
                {
                    if (Program.areaManager.GetAreaByName(a.Split(',')[0]).IsUnlocked == false)
                    {
                        hasRoadblock = true;
                        numOfRoadblocks++;
                    }
                }
                if (hasRoadblock)
                {
                    builder2.OpenElement(19, "div");
                    builder2.AddAttribute(20, "class", "badge badge-pill badge-success");
                    builder2.AddAttribute(21, "style", "margin-left:3px");
                    builder2.AddContent(22, "" + numOfRoadblocks);
                    builder2.CloseElement();
                }

            }));
            builder.CloseComponent();
            builder.CloseElement();
        };

    }
     private RenderFragment NewNavButton(Area area, bool bold)
    {
        return builder =>
        {
            builder.OpenElement(0, "li");
            builder.AddAttribute(1, "class", "nav-item px-3");
            builder.OpenComponent<NavLink>(2);
            builder.AddAttribute(3, "class", "nav-link");

            if (area.ActionRequiredForAccess != null &&
                GameState.GetPlayer().HasItemToAccessArea(area.ActionRequiredForAccess) == false)
            {
                builder.AddAttribute(4, "href", "/GatherMenu/" + area.RedirectAreaURL);
                builder.AddAttribute(5, "onclick", () => MessageManager.AddMessage("You don't have the item to access this location.(" + area.ActionRequiredForAccess + ")", "red"));
                builder.AddAttribute(6, "title", "You do not have the item to access this location.(" + area.ActionRequiredForAccess + ")");
                builder.AddAttribute(7, "style", "background-color:#EC565650");
            }
            else
            {
                builder.AddAttribute(7, "href", "/Area/" + area.AreaURL);
            }

            builder.AddAttribute(12, "ChildContent", (RenderFragment)((builder2) =>
            {
                builder2.OpenElement(13, "span");
                builder2.AddAttribute(14, "class", area.Icon);
                builder2.AddAttribute(15, "aria-hidden", "true");
                builder2.CloseElement();
                builder2.OpenElement(16, "span");
                builder2.AddContent(18, area.Name);
                builder2.CloseElement();
                bool hasRoadblock = false;
                int numOfRoadblocks = 0;
                foreach (string a in area.UnlockableAreas ?? Enumerable.Empty<string>())
                {
                    if (Program.areaManager.GetAreaByName(a.Split(',')[0]).IsUnlocked == false)
                    {
                        hasRoadblock = true;
                        numOfRoadblocks++;
                    }
                }
                if (hasRoadblock)
                {
                    builder2.OpenElement(19, "div");
                    builder2.AddAttribute(20, "class", "badge badge-pill badge-success");
                    builder2.AddAttribute(21, "style", "margin-left:3px");
                    builder2.AddContent(22, "" + numOfRoadblocks);
                    builder2.CloseElement();
                }

            }));
            builder.CloseComponent();
            builder.CloseElement();
        };

    }
    private RenderFragment ParentButton(Area area)
    {
        return builder =>
        {
            builder.OpenElement(0, "li");
            builder.AddAttribute(1, "class", "nav-item px-3");

            builder.AddAttribute(2, "style", "background-color:#FFFFFF33; padding-top:10px; cursor:pointer");
            builder.AddAttribute(4, "onclick", () => ToggleAreaChildren(area));

            builder.OpenElement(5, "span");
            builder.AddAttribute(6, "class", area.Icon);
            builder.AddAttribute(7, "aria-hidden", "true");
            builder.AddAttribute(8, "style", "color:white");
            builder.CloseElement();
            builder.OpenElement(8, "span");

            builder.AddAttribute(9, "style", "font-size: large; font-weight: bold; color:white");
            builder.AddContent(12, area.Name);
            builder.CloseElement();


            builder.CloseElement();
        };

    }
    protected override void OnInit()
    {
        GameState.StateChanged += OnGameStateChanged;
        this.StateHasChanged();
    }

    public void HideAllChildren()
    {
        foreach (Area area in Program.areaManager.GetAreasWithoutChildren())
        {
            area.Hidden = true;
        }
        StateHasChanged();
    }
    public void ToggleAreaChildren(Area area)
    {
        HideAllChildren();

        area.IsShowingChildren = !area.IsShowingChildren;
        foreach (string child in area.Children)
        {
            Program.areaManager.GetAreaByURL(child).Hidden = !Program.areaManager.GetAreaByURL(child).Hidden;
        }

        StateHasChanged();
    }

    private void AutoSave()
    {
        if (GameState.saveGameExists == false || GameState.saveDataLoaded == true)
        {
            localStorage.SetItem("Bank", GameState.GetPlayerBank().GetInventory().ToString());
            localStorage.SetItem("Skills", GameState.GetPlayer().GetSkillString());
            localStorage.SetItem("Inventory", GameState.GetPlayerInventory().ToString());
            localStorage.SetItem("Areas", Program.areaManager.SaveAreas());
            localStorage.SetItem("Followers", Program.followerManager.ToString());
            localStorage.SetItem("HP", GameState.GetPlayer().CurrentHP);
            if (GameState.GetPlayer().activeFollower != null)
            {
                localStorage.SetItem("ActiveFollower", GameState.GetPlayer().activeFollower.id);
            }

            localStorage.SetItem("AlchemyRecipes", GameState.GetPlayer().GetRecipes());
            List<int> ids = new List<int>();
            foreach (KeyValuePair<GameItem, int> pair in GameState.GetPlayerInventory().GetEquippedItems())
            {
                ids.Add(pair.Key.Id);
            }
            localStorage.SetItem("EquippedItems", ids);
            localStorage.SetItem("SaveGameExists", true);
            //MessageManager.AddMessage("You game has been automatically saved.");
            SaveDataEncrypted();
            GameState.saveDataLoaded = true;

            StateHasChanged();
        }
    }
    private string SaveDataEncrypted()
    {
        localStorage.SetItem("eSave", GetSaveDataString());
        return "";
    }
    public string GetSaveDataString()
    {
        string data = "";
        //Bank 0
        data += "" + GameState.GetPlayerBank().GetInventory().ToString();
        //Skills 1
        data += "#" + GameState.GetPlayer().GetSkillString();
        //Inventory 2
        data += "#" + GameState.GetPlayerInventory().ToString();
        //Areas 3
        data += "#" + Program.areaManager.SaveAreas();
        //Followers 4
        data += "#" + Program.followerManager.ToString();
        //HP 5
        data += "#" + GameState.GetPlayer().CurrentHP.ToString();
        //ActiveFollower 6
        if (GameState.GetPlayer().activeFollower != null)
        {
            data += "#" + GameState.GetPlayer().activeFollower.id;
        }
        else
        {
            data += "#";
        }
        //Recipes 7
        data += "#";
        foreach (string s in GameState.GetPlayer().GetRecipes())
        {
            data += s + "/";
        }
        //EquippedItems 8
        data += "#";
        foreach (KeyValuePair<GameItem, int> pair in GameState.GetPlayerInventory().GetEquippedItems())
        {
            data += pair.Key.Id + "/";
        }
        data = Encryptor.EncryptToString(data);
        return data;
    }
    void IDisposable.Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }

    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
